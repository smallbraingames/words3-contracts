// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

library PointsResult {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "", name: "PointsResult", typeId: RESOURCE_OFFCHAIN_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x6f740000000000000000000000000000506f696e7473526573756c7400000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0004010004000000000000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (uint256, address, int16)
  Schema constant _keySchema = Schema.wrap(0x003603001f612100000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint32)
  Schema constant _valueSchema = Schema.wrap(0x0004010003000000000000000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](3);
    keyNames[0] = "id";
    keyNames[1] = "player";
    keyNames[2] = "pointsId";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](1);
    fieldNames[0] = "points";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Set points.
   */
  function setPoints(uint256 id, address player, int16 pointsId, uint32 points) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(player)));
    _keyTuple[2] = bytes32(uint256(int256(pointsId)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((points)), _fieldLayout);
  }

  /**
   * @notice Set points.
   */
  function _setPoints(uint256 id, address player, int16 pointsId, uint32 points) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(player)));
    _keyTuple[2] = bytes32(uint256(int256(pointsId)));

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((points)), _fieldLayout);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(uint256 id, address player, int16 pointsId, uint32 points) internal {
    bytes memory _staticData = encodeStatic(points);

    PackedCounter _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(player)));
    _keyTuple[2] = bytes32(uint256(int256(pointsId)));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(uint256 id, address player, int16 pointsId, uint32 points) internal {
    bytes memory _staticData = encodeStatic(points);

    PackedCounter _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(player)));
    _keyTuple[2] = bytes32(uint256(int256(pointsId)));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(bytes memory _blob) internal pure returns (uint32 points) {
    points = (uint32(Bytes.slice4(_blob, 0)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(bytes memory _staticData, PackedCounter, bytes memory) internal pure returns (uint32 points) {
    (points) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(uint256 id, address player, int16 pointsId) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(player)));
    _keyTuple[2] = bytes32(uint256(int256(pointsId)));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(uint256 id, address player, int16 pointsId) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(player)));
    _keyTuple[2] = bytes32(uint256(int256(pointsId)));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(uint32 points) internal pure returns (bytes memory) {
    return abi.encodePacked(points);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(uint32 points) internal pure returns (bytes memory, PackedCounter, bytes memory) {
    bytes memory _staticData = encodeStatic(points);

    PackedCounter _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(uint256 id, address player, int16 pointsId) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(player)));
    _keyTuple[2] = bytes32(uint256(int256(pointsId)));

    return _keyTuple;
  }
}
