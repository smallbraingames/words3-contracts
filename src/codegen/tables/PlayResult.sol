// SPDX-License-Identifier: MIT
pragma solidity >=0.8.21;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals

import { Bytes } from "@latticexyz/store/src/Bytes.sol";

import { FieldLayout, FieldLayoutLib } from "@latticexyz/store/src/FieldLayout.sol";
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";

import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

import { RESOURCE_OFFCHAIN_TABLE, RESOURCE_TABLE } from "@latticexyz/store/src/storeResourceTypes.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";

// Import user types
import { Direction } from "./../common.sol";

ResourceId constant _tableId =
    ResourceId.wrap(bytes32(abi.encodePacked(RESOURCE_OFFCHAIN_TABLE, bytes14(""), bytes16("PlayResult"))));
ResourceId constant PlayResultTableId = _tableId;

FieldLayout constant _fieldLayout = FieldLayout.wrap(0x003d050214012004040000000000000000000000000000000000000000000000);

struct PlayResultData {
    address player;
    Direction direction;
    uint256 timestamp;
    int32 x;
    int32 y;
    uint8[] word;
    uint8[] filledWord;
}

library PlayResult {
    /**
     * @notice Get the table values' field layout.
     * @return _fieldLayout The field layout for the table.
     */
    function getFieldLayout() internal pure returns (FieldLayout) {
        return _fieldLayout;
    }

    /**
     * @notice Get the table's key schema.
     * @return _keySchema The key schema for the table.
     */
    function getKeySchema() internal pure returns (Schema) {
        SchemaType[] memory _keySchema = new SchemaType[](1);
        _keySchema[0] = SchemaType.UINT256;

        return SchemaLib.encode(_keySchema);
    }

    /**
     * @notice Get the table's value schema.
     * @return _valueSchema The value schema for the table.
     */
    function getValueSchema() internal pure returns (Schema) {
        SchemaType[] memory _valueSchema = new SchemaType[](7);
        _valueSchema[0] = SchemaType.ADDRESS;
        _valueSchema[1] = SchemaType.UINT8;
        _valueSchema[2] = SchemaType.UINT256;
        _valueSchema[3] = SchemaType.INT32;
        _valueSchema[4] = SchemaType.INT32;
        _valueSchema[5] = SchemaType.UINT8_ARRAY;
        _valueSchema[6] = SchemaType.UINT8_ARRAY;

        return SchemaLib.encode(_valueSchema);
    }

    /**
     * @notice Get the table's key field names.
     * @return keyNames An array of strings with the names of key fields.
     */
    function getKeyNames() internal pure returns (string[] memory keyNames) {
        keyNames = new string[](1);
        keyNames[0] = "id";
    }

    /**
     * @notice Get the table's value field names.
     * @return fieldNames An array of strings with the names of value fields.
     */
    function getFieldNames() internal pure returns (string[] memory fieldNames) {
        fieldNames = new string[](7);
        fieldNames[0] = "player";
        fieldNames[1] = "direction";
        fieldNames[2] = "timestamp";
        fieldNames[3] = "x";
        fieldNames[4] = "y";
        fieldNames[5] = "word";
        fieldNames[6] = "filledWord";
    }

    /**
     * @notice Register the table with its config.
     */
    function register() internal {
        StoreSwitch.registerTable(
            _tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames()
        );
    }

    /**
     * @notice Register the table with its config.
     */
    function _register() internal {
        StoreCore.registerTable(
            _tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames()
        );
    }

    /**
     * @notice Set player.
     */
    function setPlayer(uint256 id, address player) internal {
        bytes32[] memory _keyTuple = new bytes32[](1);
        _keyTuple[0] = bytes32(uint256(id));

        StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((player)), _fieldLayout);
    }

    /**
     * @notice Set player.
     */
    function _setPlayer(uint256 id, address player) internal {
        bytes32[] memory _keyTuple = new bytes32[](1);
        _keyTuple[0] = bytes32(uint256(id));

        StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((player)), _fieldLayout);
    }

    /**
     * @notice Set direction.
     */
    function setDirection(uint256 id, Direction direction) internal {
        bytes32[] memory _keyTuple = new bytes32[](1);
        _keyTuple[0] = bytes32(uint256(id));

        StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked(uint8(direction)), _fieldLayout);
    }

    /**
     * @notice Set direction.
     */
    function _setDirection(uint256 id, Direction direction) internal {
        bytes32[] memory _keyTuple = new bytes32[](1);
        _keyTuple[0] = bytes32(uint256(id));

        StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked(uint8(direction)), _fieldLayout);
    }

    /**
     * @notice Set timestamp.
     */
    function setTimestamp(uint256 id, uint256 timestamp) internal {
        bytes32[] memory _keyTuple = new bytes32[](1);
        _keyTuple[0] = bytes32(uint256(id));

        StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((timestamp)), _fieldLayout);
    }

    /**
     * @notice Set timestamp.
     */
    function _setTimestamp(uint256 id, uint256 timestamp) internal {
        bytes32[] memory _keyTuple = new bytes32[](1);
        _keyTuple[0] = bytes32(uint256(id));

        StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((timestamp)), _fieldLayout);
    }

    /**
     * @notice Set x.
     */
    function setX(uint256 id, int32 x) internal {
        bytes32[] memory _keyTuple = new bytes32[](1);
        _keyTuple[0] = bytes32(uint256(id));

        StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((x)), _fieldLayout);
    }

    /**
     * @notice Set x.
     */
    function _setX(uint256 id, int32 x) internal {
        bytes32[] memory _keyTuple = new bytes32[](1);
        _keyTuple[0] = bytes32(uint256(id));

        StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((x)), _fieldLayout);
    }

    /**
     * @notice Set y.
     */
    function setY(uint256 id, int32 y) internal {
        bytes32[] memory _keyTuple = new bytes32[](1);
        _keyTuple[0] = bytes32(uint256(id));

        StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((y)), _fieldLayout);
    }

    /**
     * @notice Set y.
     */
    function _setY(uint256 id, int32 y) internal {
        bytes32[] memory _keyTuple = new bytes32[](1);
        _keyTuple[0] = bytes32(uint256(id));

        StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((y)), _fieldLayout);
    }

    /**
     * @notice Set the full data using individual values.
     */
    function set(
        uint256 id,
        address player,
        Direction direction,
        uint256 timestamp,
        int32 x,
        int32 y,
        uint8[] memory word,
        uint8[] memory filledWord
    )
        internal
    {
        bytes memory _staticData = encodeStatic(player, direction, timestamp, x, y);

        PackedCounter _encodedLengths = encodeLengths(word, filledWord);
        bytes memory _dynamicData = encodeDynamic(word, filledWord);

        bytes32[] memory _keyTuple = new bytes32[](1);
        _keyTuple[0] = bytes32(uint256(id));

        StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
    }

    /**
     * @notice Set the full data using individual values.
     */
    function _set(
        uint256 id,
        address player,
        Direction direction,
        uint256 timestamp,
        int32 x,
        int32 y,
        uint8[] memory word,
        uint8[] memory filledWord
    )
        internal
    {
        bytes memory _staticData = encodeStatic(player, direction, timestamp, x, y);

        PackedCounter _encodedLengths = encodeLengths(word, filledWord);
        bytes memory _dynamicData = encodeDynamic(word, filledWord);

        bytes32[] memory _keyTuple = new bytes32[](1);
        _keyTuple[0] = bytes32(uint256(id));

        StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
    }

    /**
     * @notice Set the full data using the data struct.
     */
    function set(uint256 id, PlayResultData memory _table) internal {
        bytes memory _staticData = encodeStatic(_table.player, _table.direction, _table.timestamp, _table.x, _table.y);

        PackedCounter _encodedLengths = encodeLengths(_table.word, _table.filledWord);
        bytes memory _dynamicData = encodeDynamic(_table.word, _table.filledWord);

        bytes32[] memory _keyTuple = new bytes32[](1);
        _keyTuple[0] = bytes32(uint256(id));

        StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
    }

    /**
     * @notice Set the full data using the data struct.
     */
    function _set(uint256 id, PlayResultData memory _table) internal {
        bytes memory _staticData = encodeStatic(_table.player, _table.direction, _table.timestamp, _table.x, _table.y);

        PackedCounter _encodedLengths = encodeLengths(_table.word, _table.filledWord);
        bytes memory _dynamicData = encodeDynamic(_table.word, _table.filledWord);

        bytes32[] memory _keyTuple = new bytes32[](1);
        _keyTuple[0] = bytes32(uint256(id));

        StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
    }

    /**
     * @notice Decode the tightly packed blob of static data using this table's field layout.
     */
    function decodeStatic(bytes memory _blob)
        internal
        pure
        returns (address player, Direction direction, uint256 timestamp, int32 x, int32 y)
    {
        player = (address(Bytes.slice20(_blob, 0)));

        direction = Direction(uint8(Bytes.slice1(_blob, 20)));

        timestamp = (uint256(Bytes.slice32(_blob, 21)));

        x = (int32(uint32(Bytes.slice4(_blob, 53))));

        y = (int32(uint32(Bytes.slice4(_blob, 57))));
    }

    /**
     * @notice Decode the tightly packed blob of dynamic data using the encoded lengths.
     */
    function decodeDynamic(
        PackedCounter _encodedLengths,
        bytes memory _blob
    )
        internal
        pure
        returns (uint8[] memory word, uint8[] memory filledWord)
    {
        uint256 _start;
        uint256 _end;
        unchecked {
            _end = _encodedLengths.atIndex(0);
        }
        word = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_uint8());

        _start = _end;
        unchecked {
            _end += _encodedLengths.atIndex(1);
        }
        filledWord = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_uint8());
    }

    /**
     * @notice Decode the tightly packed blobs using this table's field layout.
     * @param _staticData Tightly packed static fields.
     * @param _encodedLengths Encoded lengths of dynamic fields.
     * @param _dynamicData Tightly packed dynamic fields.
     */
    function decode(
        bytes memory _staticData,
        PackedCounter _encodedLengths,
        bytes memory _dynamicData
    )
        internal
        pure
        returns (PlayResultData memory _table)
    {
        (_table.player, _table.direction, _table.timestamp, _table.x, _table.y) = decodeStatic(_staticData);

        (_table.word, _table.filledWord) = decodeDynamic(_encodedLengths, _dynamicData);
    }

    /**
     * @notice Delete all data for given keys.
     */
    function deleteRecord(uint256 id) internal {
        bytes32[] memory _keyTuple = new bytes32[](1);
        _keyTuple[0] = bytes32(uint256(id));

        StoreSwitch.deleteRecord(_tableId, _keyTuple);
    }

    /**
     * @notice Delete all data for given keys.
     */
    function _deleteRecord(uint256 id) internal {
        bytes32[] memory _keyTuple = new bytes32[](1);
        _keyTuple[0] = bytes32(uint256(id));

        StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
    }

    /**
     * @notice Tightly pack static (fixed length) data using this table's schema.
     * @return The static data, encoded into a sequence of bytes.
     */
    function encodeStatic(
        address player,
        Direction direction,
        uint256 timestamp,
        int32 x,
        int32 y
    )
        internal
        pure
        returns (bytes memory)
    {
        return abi.encodePacked(player, direction, timestamp, x, y);
    }

    /**
     * @notice Tightly pack dynamic data lengths using this table's schema.
     * @return _encodedLengths The lengths of the dynamic fields (packed into a single bytes32 value).
     */
    function encodeLengths(
        uint8[] memory word,
        uint8[] memory filledWord
    )
        internal
        pure
        returns (PackedCounter _encodedLengths)
    {
        // Lengths are effectively checked during copy by 2**40 bytes exceeding gas limits
        unchecked {
            _encodedLengths = PackedCounterLib.pack(word.length * 1, filledWord.length * 1);
        }
    }

    /**
     * @notice Tightly pack dynamic (variable length) data using this table's schema.
     * @return The dynamic data, encoded into a sequence of bytes.
     */
    function encodeDynamic(uint8[] memory word, uint8[] memory filledWord) internal pure returns (bytes memory) {
        return abi.encodePacked(EncodeArray.encode((word)), EncodeArray.encode((filledWord)));
    }

    /**
     * @notice Encode all of a record's fields.
     * @return The static (fixed length) data, encoded into a sequence of bytes.
     * @return The lengths of the dynamic fields (packed into a single bytes32 value).
     * @return The dyanmic (variable length) data, encoded into a sequence of bytes.
     */
    function encode(
        address player,
        Direction direction,
        uint256 timestamp,
        int32 x,
        int32 y,
        uint8[] memory word,
        uint8[] memory filledWord
    )
        internal
        pure
        returns (bytes memory, PackedCounter, bytes memory)
    {
        bytes memory _staticData = encodeStatic(player, direction, timestamp, x, y);

        PackedCounter _encodedLengths = encodeLengths(word, filledWord);
        bytes memory _dynamicData = encodeDynamic(word, filledWord);

        return (_staticData, _encodedLengths, _dynamicData);
    }

    /**
     * @notice Encode keys as a bytes32 array using this table's field layout.
     */
    function encodeKeyTuple(uint256 id) internal pure returns (bytes32[] memory) {
        bytes32[] memory _keyTuple = new bytes32[](1);
        _keyTuple[0] = bytes32(uint256(id));

        return _keyTuple;
    }
}
