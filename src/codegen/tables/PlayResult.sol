// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

// Import user types
import { Direction } from "./../Types.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("PlayResult")));
bytes32 constant PlayResultTableId = _tableId;

struct PlayResultData {
  address player;
  Direction direction;
  int32 x;
  int32 y;
  uint8[] word;
  uint8[] filledWord;
}

library PlayResult {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](6);
    _schema[0] = SchemaType.ADDRESS;
    _schema[1] = SchemaType.UINT8;
    _schema[2] = SchemaType.INT32;
    _schema[3] = SchemaType.INT32;
    _schema[4] = SchemaType.UINT8_ARRAY;
    _schema[5] = SchemaType.UINT8_ARRAY;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](1);
    _schema[0] = SchemaType.UINT256;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](6);
    _fieldNames[0] = "player";
    _fieldNames[1] = "direction";
    _fieldNames[2] = "x";
    _fieldNames[3] = "y";
    _fieldNames[4] = "word";
    _fieldNames[5] = "filledWord";
    return ("PlayResult", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Emit the ephemeral event using individual values */
  function emitEphemeral(
    uint256 id,
    address player,
    Direction direction,
    int32 x,
    int32 y,
    uint8[] memory word,
    uint8[] memory filledWord
  ) internal {
    bytes memory _data = encode(player, direction, x, y, word, filledWord);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.emitEphemeralRecord(_tableId, _keyTuple, _data);
  }

  /** Emit the ephemeral event using individual values (using the specified store) */
  function emitEphemeral(
    IStore _store,
    uint256 id,
    address player,
    Direction direction,
    int32 x,
    int32 y,
    uint8[] memory word,
    uint8[] memory filledWord
  ) internal {
    bytes memory _data = encode(player, direction, x, y, word, filledWord);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    _store.emitEphemeralRecord(_tableId, _keyTuple, _data);
  }

  /** Emit the ephemeral event using the data struct */
  function emitEphemeral(uint256 id, PlayResultData memory _table) internal {
    emitEphemeral(id, _table.player, _table.direction, _table.x, _table.y, _table.word, _table.filledWord);
  }

  /** Emit the ephemeral event using the data struct (using the specified store) */
  function emitEphemeral(IStore _store, uint256 id, PlayResultData memory _table) internal {
    emitEphemeral(_store, id, _table.player, _table.direction, _table.x, _table.y, _table.word, _table.filledWord);
  }

  /** Tightly pack full data using this table's schema */
  function encode(
    address player,
    Direction direction,
    int32 x,
    int32 y,
    uint8[] memory word,
    uint8[] memory filledWord
  ) internal pure returns (bytes memory) {
    uint40[] memory _counters = new uint40[](2);
    _counters[0] = uint40(word.length * 1);
    _counters[1] = uint40(filledWord.length * 1);
    PackedCounter _encodedLengths = PackedCounterLib.pack(_counters);

    return
      abi.encodePacked(
        player,
        direction,
        x,
        y,
        _encodedLengths.unwrap(),
        EncodeArray.encode((word)),
        EncodeArray.encode((filledWord))
      );
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple(uint256 id) internal pure returns (bytes32[] memory _keyTuple) {
    _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));
  }
}
