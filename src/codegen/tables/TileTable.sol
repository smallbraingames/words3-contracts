// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

// Import user types
import { Letter } from "./../Types.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("TileTable")));
bytes32 constant TileTableTableId = _tableId;

struct TileTableData {
  address player;
  Letter letter;
}

library TileTable {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](2);
    _schema[0] = SchemaType.ADDRESS;
    _schema[1] = SchemaType.UINT8;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](2);
    _schema[0] = SchemaType.INT32;
    _schema[1] = SchemaType.INT32;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](2);
    _fieldNames[0] = "player";
    _fieldNames[1] = "letter";
    return ("TileTable", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get player */
  function getPlayer(int32 x, int32 y) internal view returns (address player) {
    bytes32[] memory _primaryKeys = new bytes32[](2);
    _primaryKeys[0] = bytes32(uint256(uint32((x))));
    _primaryKeys[1] = bytes32(uint256(uint32((y))));

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 0);
    return (address(Bytes.slice20(_blob, 0)));
  }

  /** Get player (using the specified store) */
  function getPlayer(IStore _store, int32 x, int32 y) internal view returns (address player) {
    bytes32[] memory _primaryKeys = new bytes32[](2);
    _primaryKeys[0] = bytes32(uint256(uint32((x))));
    _primaryKeys[1] = bytes32(uint256(uint32((y))));

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 0);
    return (address(Bytes.slice20(_blob, 0)));
  }

  /** Set player */
  function setPlayer(int32 x, int32 y, address player) internal {
    bytes32[] memory _primaryKeys = new bytes32[](2);
    _primaryKeys[0] = bytes32(uint256(uint32((x))));
    _primaryKeys[1] = bytes32(uint256(uint32((y))));

    StoreSwitch.setField(_tableId, _primaryKeys, 0, abi.encodePacked((player)));
  }

  /** Set player (using the specified store) */
  function setPlayer(IStore _store, int32 x, int32 y, address player) internal {
    bytes32[] memory _primaryKeys = new bytes32[](2);
    _primaryKeys[0] = bytes32(uint256(uint32((x))));
    _primaryKeys[1] = bytes32(uint256(uint32((y))));

    _store.setField(_tableId, _primaryKeys, 0, abi.encodePacked((player)));
  }

  /** Get letter */
  function getLetter(int32 x, int32 y) internal view returns (Letter letter) {
    bytes32[] memory _primaryKeys = new bytes32[](2);
    _primaryKeys[0] = bytes32(uint256(uint32((x))));
    _primaryKeys[1] = bytes32(uint256(uint32((y))));

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 1);
    return Letter(uint8(Bytes.slice1(_blob, 0)));
  }

  /** Get letter (using the specified store) */
  function getLetter(IStore _store, int32 x, int32 y) internal view returns (Letter letter) {
    bytes32[] memory _primaryKeys = new bytes32[](2);
    _primaryKeys[0] = bytes32(uint256(uint32((x))));
    _primaryKeys[1] = bytes32(uint256(uint32((y))));

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 1);
    return Letter(uint8(Bytes.slice1(_blob, 0)));
  }

  /** Set letter */
  function setLetter(int32 x, int32 y, Letter letter) internal {
    bytes32[] memory _primaryKeys = new bytes32[](2);
    _primaryKeys[0] = bytes32(uint256(uint32((x))));
    _primaryKeys[1] = bytes32(uint256(uint32((y))));

    StoreSwitch.setField(_tableId, _primaryKeys, 1, abi.encodePacked(uint8(letter)));
  }

  /** Set letter (using the specified store) */
  function setLetter(IStore _store, int32 x, int32 y, Letter letter) internal {
    bytes32[] memory _primaryKeys = new bytes32[](2);
    _primaryKeys[0] = bytes32(uint256(uint32((x))));
    _primaryKeys[1] = bytes32(uint256(uint32((y))));

    _store.setField(_tableId, _primaryKeys, 1, abi.encodePacked(uint8(letter)));
  }

  /** Get the full data */
  function get(int32 x, int32 y) internal view returns (TileTableData memory _table) {
    bytes32[] memory _primaryKeys = new bytes32[](2);
    _primaryKeys[0] = bytes32(uint256(uint32((x))));
    _primaryKeys[1] = bytes32(uint256(uint32((y))));

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _primaryKeys, getSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store, int32 x, int32 y) internal view returns (TileTableData memory _table) {
    bytes32[] memory _primaryKeys = new bytes32[](2);
    _primaryKeys[0] = bytes32(uint256(uint32((x))));
    _primaryKeys[1] = bytes32(uint256(uint32((y))));

    bytes memory _blob = _store.getRecord(_tableId, _primaryKeys, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(int32 x, int32 y, address player, Letter letter) internal {
    bytes memory _data = encode(player, letter);

    bytes32[] memory _primaryKeys = new bytes32[](2);
    _primaryKeys[0] = bytes32(uint256(uint32((x))));
    _primaryKeys[1] = bytes32(uint256(uint32((y))));

    StoreSwitch.setRecord(_tableId, _primaryKeys, _data);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(IStore _store, int32 x, int32 y, address player, Letter letter) internal {
    bytes memory _data = encode(player, letter);

    bytes32[] memory _primaryKeys = new bytes32[](2);
    _primaryKeys[0] = bytes32(uint256(uint32((x))));
    _primaryKeys[1] = bytes32(uint256(uint32((y))));

    _store.setRecord(_tableId, _primaryKeys, _data);
  }

  /** Set the full data using the data struct */
  function set(int32 x, int32 y, TileTableData memory _table) internal {
    set(x, y, _table.player, _table.letter);
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, int32 x, int32 y, TileTableData memory _table) internal {
    set(_store, x, y, _table.player, _table.letter);
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal pure returns (TileTableData memory _table) {
    _table.player = (address(Bytes.slice20(_blob, 0)));

    _table.letter = Letter(uint8(Bytes.slice1(_blob, 20)));
  }

  /** Tightly pack full data using this table's schema */
  function encode(address player, Letter letter) internal view returns (bytes memory) {
    return abi.encodePacked(player, letter);
  }

  /* Delete all data for given keys */
  function deleteRecord(int32 x, int32 y) internal {
    bytes32[] memory _primaryKeys = new bytes32[](2);
    _primaryKeys[0] = bytes32(uint256(uint32((x))));
    _primaryKeys[1] = bytes32(uint256(uint32((y))));

    StoreSwitch.deleteRecord(_tableId, _primaryKeys);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, int32 x, int32 y) internal {
    bytes32[] memory _primaryKeys = new bytes32[](2);
    _primaryKeys[0] = bytes32(uint256(uint32((x))));
    _primaryKeys[1] = bytes32(uint256(uint32((y))));

    _store.deleteRecord(_tableId, _primaryKeys);
  }
}
