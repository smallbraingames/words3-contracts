// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals

import { Bytes } from "@latticexyz/store/src/Bytes.sol";

import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";

import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";

struct FeeConfigData {
    address feeTaker;
    uint16 feeBps;
}

library FeeConfig {
    // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "", name: "FeeConfig", typeId: RESOURCE_TABLE
    // });`
    ResourceId constant _tableId = ResourceId.wrap(0x74620000000000000000000000000000466565436f6e66696700000000000000);

    FieldLayout constant _fieldLayout =
        FieldLayout.wrap(0x0016020014020000000000000000000000000000000000000000000000000000);

    // Hex-encoded key schema of ()
    Schema constant _keySchema = Schema.wrap(0x0000000000000000000000000000000000000000000000000000000000000000);
    // Hex-encoded value schema of (address, uint16)
    Schema constant _valueSchema = Schema.wrap(0x0016020061010000000000000000000000000000000000000000000000000000);

    /**
     * @notice Get the table's key field names.
     * @return keyNames An array of strings with the names of key fields.
     */
    function getKeyNames() internal pure returns (string[] memory keyNames) {
        keyNames = new string[](0);
    }

    /**
     * @notice Get the table's value field names.
     * @return fieldNames An array of strings with the names of value fields.
     */
    function getFieldNames() internal pure returns (string[] memory fieldNames) {
        fieldNames = new string[](2);
        fieldNames[0] = "feeTaker";
        fieldNames[1] = "feeBps";
    }

    /**
     * @notice Register the table with its config.
     */
    function register() internal {
        StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
    }

    /**
     * @notice Register the table with its config.
     */
    function _register() internal {
        StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
    }

    /**
     * @notice Get feeTaker.
     */
    function getFeeTaker() internal view returns (address feeTaker) {
        bytes32[] memory _keyTuple = new bytes32[](0);

        bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
        return (address(bytes20(_blob)));
    }

    /**
     * @notice Get feeTaker.
     */
    function _getFeeTaker() internal view returns (address feeTaker) {
        bytes32[] memory _keyTuple = new bytes32[](0);

        bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
        return (address(bytes20(_blob)));
    }

    /**
     * @notice Set feeTaker.
     */
    function setFeeTaker(address feeTaker) internal {
        bytes32[] memory _keyTuple = new bytes32[](0);

        StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((feeTaker)), _fieldLayout);
    }

    /**
     * @notice Set feeTaker.
     */
    function _setFeeTaker(address feeTaker) internal {
        bytes32[] memory _keyTuple = new bytes32[](0);

        StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((feeTaker)), _fieldLayout);
    }

    /**
     * @notice Get feeBps.
     */
    function getFeeBps() internal view returns (uint16 feeBps) {
        bytes32[] memory _keyTuple = new bytes32[](0);

        bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
        return (uint16(bytes2(_blob)));
    }

    /**
     * @notice Get feeBps.
     */
    function _getFeeBps() internal view returns (uint16 feeBps) {
        bytes32[] memory _keyTuple = new bytes32[](0);

        bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
        return (uint16(bytes2(_blob)));
    }

    /**
     * @notice Set feeBps.
     */
    function setFeeBps(uint16 feeBps) internal {
        bytes32[] memory _keyTuple = new bytes32[](0);

        StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((feeBps)), _fieldLayout);
    }

    /**
     * @notice Set feeBps.
     */
    function _setFeeBps(uint16 feeBps) internal {
        bytes32[] memory _keyTuple = new bytes32[](0);

        StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((feeBps)), _fieldLayout);
    }

    /**
     * @notice Get the full data.
     */
    function get() internal view returns (FeeConfigData memory _table) {
        bytes32[] memory _keyTuple = new bytes32[](0);

        (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) =
            StoreSwitch.getRecord(_tableId, _keyTuple, _fieldLayout);
        return decode(_staticData, _encodedLengths, _dynamicData);
    }

    /**
     * @notice Get the full data.
     */
    function _get() internal view returns (FeeConfigData memory _table) {
        bytes32[] memory _keyTuple = new bytes32[](0);

        (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) =
            StoreCore.getRecord(_tableId, _keyTuple, _fieldLayout);
        return decode(_staticData, _encodedLengths, _dynamicData);
    }

    /**
     * @notice Set the full data using individual values.
     */
    function set(address feeTaker, uint16 feeBps) internal {
        bytes memory _staticData = encodeStatic(feeTaker, feeBps);

        EncodedLengths _encodedLengths;
        bytes memory _dynamicData;

        bytes32[] memory _keyTuple = new bytes32[](0);

        StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
    }

    /**
     * @notice Set the full data using individual values.
     */
    function _set(address feeTaker, uint16 feeBps) internal {
        bytes memory _staticData = encodeStatic(feeTaker, feeBps);

        EncodedLengths _encodedLengths;
        bytes memory _dynamicData;

        bytes32[] memory _keyTuple = new bytes32[](0);

        StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
    }

    /**
     * @notice Set the full data using the data struct.
     */
    function set(FeeConfigData memory _table) internal {
        bytes memory _staticData = encodeStatic(_table.feeTaker, _table.feeBps);

        EncodedLengths _encodedLengths;
        bytes memory _dynamicData;

        bytes32[] memory _keyTuple = new bytes32[](0);

        StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
    }

    /**
     * @notice Set the full data using the data struct.
     */
    function _set(FeeConfigData memory _table) internal {
        bytes memory _staticData = encodeStatic(_table.feeTaker, _table.feeBps);

        EncodedLengths _encodedLengths;
        bytes memory _dynamicData;

        bytes32[] memory _keyTuple = new bytes32[](0);

        StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
    }

    /**
     * @notice Decode the tightly packed blob of static data using this table's field layout.
     */
    function decodeStatic(bytes memory _blob) internal pure returns (address feeTaker, uint16 feeBps) {
        feeTaker = (address(Bytes.getBytes20(_blob, 0)));

        feeBps = (uint16(Bytes.getBytes2(_blob, 20)));
    }

    /**
     * @notice Decode the tightly packed blobs using this table's field layout.
     * @param _staticData Tightly packed static fields.
     *
     *
     */
    function decode(
        bytes memory _staticData,
        EncodedLengths,
        bytes memory
    )
        internal
        pure
        returns (FeeConfigData memory _table)
    {
        (_table.feeTaker, _table.feeBps) = decodeStatic(_staticData);
    }

    /**
     * @notice Delete all data for given keys.
     */
    function deleteRecord() internal {
        bytes32[] memory _keyTuple = new bytes32[](0);

        StoreSwitch.deleteRecord(_tableId, _keyTuple);
    }

    /**
     * @notice Delete all data for given keys.
     */
    function _deleteRecord() internal {
        bytes32[] memory _keyTuple = new bytes32[](0);

        StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
    }

    /**
     * @notice Tightly pack static (fixed length) data using this table's schema.
     * @return The static data, encoded into a sequence of bytes.
     */
    function encodeStatic(address feeTaker, uint16 feeBps) internal pure returns (bytes memory) {
        return abi.encodePacked(feeTaker, feeBps);
    }

    /**
     * @notice Encode all of a record's fields.
     * @return The static (fixed length) data, encoded into a sequence of bytes.
     * @return The lengths of the dynamic fields (packed into a single bytes32 value).
     * @return The dynamic (variable length) data, encoded into a sequence of bytes.
     */
    function encode(
        address feeTaker,
        uint16 feeBps
    )
        internal
        pure
        returns (bytes memory, EncodedLengths, bytes memory)
    {
        bytes memory _staticData = encodeStatic(feeTaker, feeBps);

        EncodedLengths _encodedLengths;
        bytes memory _dynamicData;

        return (_staticData, _encodedLengths, _dynamicData);
    }

    /**
     * @notice Encode keys as a bytes32 array using this table's field layout.
     */
    function encodeKeyTuple() internal pure returns (bytes32[] memory) {
        bytes32[] memory _keyTuple = new bytes32[](0);

        return _keyTuple;
    }
}
